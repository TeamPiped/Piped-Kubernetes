---
global:
  # -- Set an override for the prefix of the fullname
  nameOverride:
  # -- Set the entire name definition
  fullnameOverride:
  # -- Set additional global labels. Helm templates can be used.
  labels: {}
  # -- Set additional global annotations. Helm templates can be used.
  annotations: {}

controller:
  # -- enable the controller.
  enabled: false

serviceAccount:
  create: false


frontend:
  enabled: true
  service:
    main:
      enabled: true
      primary: true
      type: ClusterIP
      ports:
        http:
          enabled: true
          primary: true
          port: 80
          protocol: HTTP

  image:
    # -- image repository
    repository: 1337kavin/piped-frontend
    # -- image tag
    # @chart.appVersion
    tag:
    # -- image pull policy
    pullPolicy: IfNotPresent

  # env:
  #  BACKEND_HOSTNAME: pipedapi.example.org

  command: "/bin/ash"
  args:
    - -c
    - "sed -i s/pipedapi.kavin.rocks/$BACKEND_HOSTNAME/g /usr/share/nginx/html/assets/* && /docker-entrypoint.sh && nginx -g 'daemon off;'"

  # resources:
  #  requests:
  #    memory: 32Mi
  #  limits:
  #    memory: 128Mi

backend:
  enabled: true
  service:
    main:
      enabled: true
      primary: true
      type: ClusterIP
      ports:
        http:
          enabled: true
          primary: true
          port: 8080
          protocol: HTTP

  #  command: "/bin/sh"
  #  args:
  #    - -c
  #    - sleep infinity

  # If the hostnames are not set for backend, proxy and API, they will be automatically fetched from their ingresses.
  config:
    PORT: 8080
    HTTP_WORKERS: 2
    # PROXY_PART: https://PROXY_HOSTNAME
    # Outgoing HTTP Proxy - eg: 127.0.0.1:8118
    # HTTP_PROXY: 127.0.0.1:8118
    # Captcha Parameters
    # CAPTCHA_BASE_URL: https://api.capmonster.cloud/
    # CAPTCHA_API_KEY: INSERT_HERE
    # API_URL: https://BACKEND_HOSTNAME
    # FRONTEND_URL: https://FRONTEND_HOSTNAME
    # Enable haveibeenpwned compromised password API
    # COMPROMISED_PASSWORD_CHECK: true
    # Disable Registration
    # DISABLE_REGISTRATION: false
    # Feed Retention Time in Days
    # FEED_RETENTION: 30
    # database:
    # connection_url: jdbc:postgresql://postgres:5432/piped
    # driver_class: org.postgresql.Driver
    # dialect: org.hibernate.dialect.PostgreSQLDialect
    # username: piped
    # password: changeme
    # Please only provide the secret name (it should already exist),
    # it should only include database.username and database.password as others will be taken from above.
    # secret: secret-name


  image:
    # -- image repository
    repository: 1337kavin/piped
    # -- image tag
    # @chart.appVersion
    tag:
    # -- image pull policy
    pullPolicy: IfNotPresent

  # resources:
  #  requests:
  #    memory: 500Mi
  #  limits:
  #    memory: 1500Mi

ytproxy:
  enabled: true
  service:
    main:
      enabled: true
      primary: true
      type: ClusterIP
      ports:
        http:
          enabled: true
          primary: true
          port: 8080
          protocol: HTTP

  command: "/app/piped-proxy"


  image:
    # -- image repository
    repository: 1337kavin/piped-proxy
    # -- image tag
    # @chart.appVersion
    tag:
    # -- image pull policy
    pullPolicy: IfNotPresent

  # resources:
  #  requests:
  #    memory: 32Mi
  #  limits:
  #    memory: 500Mi

ingress:
  main:
    enabled: true
    primary: true
    hosts:
      - host: piped.video
        paths:
          - path: "/"
    tls: []

  backend:
    enabled: true
    ingressClassName: nginx
    primary: false
    hosts:
      - host: pipedapi.piped.video
        paths:
          - path: "/"
    tls: []

  ytproxy:
    enabled: true
    ingressClassName: nginx
    primary: false
    hosts:
      - host: ytproxy.piped.video
        paths:
          - path: "/"
    tls: []

# See options from https://artifacthub.io/packages/helm/bitnami/postgresql#parameters
postgresql:
  enabled: true
  image:
    tag: 11.19.0-debian-11-r4
  auth:
    database: piped
    username: piped
    password: changemepiped

# -- Probe configuration
# -- [[ref]](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
# @default -- See below
probes:
  # -- Liveness probe configuration
  # @default -- See below
  liveness:
    # -- Enable the liveness probe
    enabled: true
    # -- Set this to `true` if you wish to specify your own livenessProbe
    custom: false
    # -- The spec field contains the values for the default livenessProbe.
    # If you selected `custom: true`, this field holds the definition of the livenessProbe.
    # @default -- See below
    spec:
      initialDelaySeconds: 0
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3

  # -- Redainess probe configuration
  # @default -- See below
  readiness:
    # -- Enable the readiness probe
    enabled: true
    # -- Set this to `true` if you wish to specify your own readinessProbe
    custom: false
    # -- The spec field contains the values for the default readinessProbe.
    # If you selected `custom: true`, this field holds the definition of the readinessProbe.
    # @default -- See below
    spec:
      initialDelaySeconds: 0
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3

  # -- Startup probe configuration
  # @default -- See below
  startup:
    # -- Enable the startup probe
    enabled: true
    # -- Set this to `true` if you wish to specify your own startupProbe
    custom: false
    # -- The spec field contains the values for the default startupProbe.
    # If you selected `custom: true`, this field holds the definition of the startupProbe.
    # @default -- See below
    spec:
      initialDelaySeconds: 0
      timeoutSeconds: 1
      ## This means it has a maximum of 5*30=150 seconds to start up before it fails
      periodSeconds: 5
      failureThreshold: 30

termination:
  gracePeriodSeconds:
